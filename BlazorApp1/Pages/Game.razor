@page "/game"
@using HackathonX.DB.Model
@using HackathonX.Web.Data
@using HackathonX.DB.Repositories
@using Microsoft.AspNetCore.WebUtilities
@using System.Timers
@using Microsoft.EntityFrameworkCore
@*@inject XService TheService*@
@inject NavigationManager navManager
@inject IDbContextFactory<HackathonXContext> DbFactory

<PageTitle>Counter</PageTitle>

<style>
  .game-status {
    text-align:center;
    display: flex;
    padding: 1rem;
    background-color: #f7f7f7;
    border: .1rem solid #d6d5d5;
    border-radius: 1rem;
    margin: 1rem;
  }

  .game-status .timer {
    flex-grow: 1;
  }

  .game-status .user-name {
    flex-grow: 4;
  }

  .game-status .score {
    flex-grow: 1;
  }

  .battlefield {
    display: flex;
  }

  .questionnaire {
    width: 400px;
  }
  .puzzle {
    width: 600px;
    height: 405px;
    display: flex;
    flex-wrap: wrap;
  }

  .form-group {
    margin: 1rem;
  }

  .puzzle-unit {
    width: 200px;
    height: 135px;
    background-color: #5ea1c4;
    border:0.01rem solid #653;
    box-shadow: 3px 3px 10px 1px #286382 inset;
    cursor: pointer;
  }
  .puzzle-unit:hover {
    box-shadow: 3px 3px 10px 1px #d1c732 inset;
  }
  .puzzle-unit.selected {
    background-color: #264d61;
    color: #dfdfdf;
    font-size: 5rem;
    text-align: center;
  }
</style>

@if (_user == null || _questionnaire == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <BlazorApp1.Components.GameStatus CurrentUser="_user" Score="_score"/>
  @*<div class="game-status">
    <div class="timer">10:15</div>
    <div class="user-name">@_user.Name</div>
    <div class="score">@_score</div>
  </div>*@

  @*@foreach(var question in _questionnaire.Where(x => x.AnswerId.HasValue || x.Id == _currentQuestion.Id))
  {
    <div>
      <div>@question.Text</div>
      @foreach(var ans in question.Answers)
      {
        <div>@ans.Text</div>
      }
    </div>
  }*@
  <div class="battlefield">
    <div class="questionnaire">
      <BlazorApp1.Components.QuestionnaireForm CurrentQuestion="_currentQuestion" AbsencePlanSubmitted="AnswerTheQuestion" />
      @*@if (_currentQuestion == null)
      {
        <span>Click on a puzzle cell</span>
      }
      else
      {
        <EditForm Model="@_currentQuestion" OnValidSubmit="@AnswerTheQuestion">
          <div class="form-group">
            <label>@_currentQuestion.Text</label>
            <div class="form-control">
            <InputRadioGroup id="answerId" @bind-Value="_currentQuestion.AnswerId">
            @foreach(var ans in _currentQuestion.Answers)
            {
              <div>
                <InputRadio Value="@ans.Id"/> @ans.Text
              </div>
            }
            </InputRadioGroup>
            </div>
          </div>
          <button type="submit">Next</button>
        </EditForm>
      }*@
    </div>
    <div class="puzzle">
      <BlazorApp1.Components.Puzzle CurrentQuestion="_currentQuestion" Questionnaire="_questionnaire" QuestionSelected="SelectPuzzle" />
      @*@foreach(var i in _questionnaire)
        {
          var st = i.Id == _currentQuestion?.Id ? "selected" : "";
          <div class="puzzle-unit @st" @onclick="(() => SelectPuzzle(i.Id))">@i.Score</div>
        }*@
    </div>
  </div>
}

@code {
  private HackathonX.Web.Data.User _user;
  private IEnumerable<HackathonX.Web.Data.Question> _questionnaire;
  bool _dataIsLoaded = false;

  private DateTime _startTime = DateTime.Now;
  private static int _timeCounter = 0;

  private int _score;
  private int _currentQuestionId;
  private HackathonX.Web.Data.Question? _currentQuestion;

  private System.Timers.Timer? _timer;

  protected override async Task OnInitializedAsync()
  {
    if (!_dataIsLoaded)
    {
      var uri = navManager.ToAbsoluteUri(navManager.Uri);
      if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("user", out var userName))
      {
        navManager.NavigateTo("/");
      }

      var context = DbFactory.CreateDbContext();
      using var userRepo = new UserRepository(context);
      using var questionnaireRepo = new QuestionnaireRepository(context);
      var userFromDb = await userRepo.GetOrAddUser(userName);
      _user = new HackathonX.Web.Data.User { Id = userFromDb.Id, Name = userFromDb.Name};

      var questionnaireFromDb = await questionnaireRepo.GetQuestionnaire();
      _questionnaire = questionnaireFromDb.Select(x => new HackathonX.Web.Data.Question
            {
                Id = x.Id,
                Text = x.Text,
                Score = x.Score,
                Answers = x.Answers.Select(y => new HackathonX.Web.Data.Answer { Id = y.Id, Text = y.Text, IsCorrect = y.IsCorrect, QuestionId = y.QuestionId })
            });
      _dataIsLoaded = true;

            //_timer = new System.Timers.Timer(2000);
      //_timer.Elapsed += OnTimedEvent;
      //_timer.Enabled = true;
    }

    await base.OnInitializedAsync();
  }

  private static void OnTimedEvent(Object source, ElapsedEventArgs e)
  {
    Console.WriteLine("The Elapsed event was raised at {0:HH:mm:ss.fff}",
                      e.SignalTime);
    _timeCounter++;
  }

  private async Task AnswerTheQuestion(HackathonX.Web.Data.Question? question)
  {
    if (question == null)
    {
      return;
    }
    
    //if (question.AnswerId == question.Answers.Single(x => x.IsCorrect).Id)
    //{
    //  _score += question.Score;
    //}

    //if(_questionnaire.All(x => x.AnswerId.HasValue))
    //{
    //  await TheService.SaveUserScore(_user.Id, _score, TimeSpan.FromSeconds(_timeCounter));
    //  navManager.NavigateTo("/results");
    //}

    //StateHasChanged();
  }

  private void SelectPuzzle(int? questionId)
  {
    var question = _questionnaire.SingleOrDefault(x => x.Id == questionId);
    if (question != null)
    {
      _currentQuestion = question;

      //StateHasChanged();
    }
  }
}

