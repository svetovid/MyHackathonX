@using HackathonX.Service

<style>
  .puzzle-unit {
    width: 200px;
    height: 135px;
    background-color: #5ea1c4;
    border:0.01rem solid #653;
    box-shadow: 3px 3px 10px 1px #286382 inset;
    cursor: pointer;
    position: relative;
  }
  .puzzle-unit:hover {
    box-shadow: 3px 3px 10px 1px #d1c732 inset;
  }
  .puzzle-unit.selected {
    background-color: #264d61;
    color: #dfdfdf;
    font-size: 5rem;
    text-align: center;
  }
  .flip {
    transition: transform 0.8s;
    transform-style: preserve-3d;
    transform: rotateY(180deg);
  }
  .flip-box-front, .flip-box-back {
  position: absolute;
  width: 100%;
  height: 100%;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
}

.flip-box-front {
  background-color: #bbb;
  color: black;
}

.flip-box-back {
  background-color: dodgerblue;
  color: white;
  transform: rotateY(180deg);
}
</style>

@if (Questionnaire != null)
{
  foreach(var question in Questionnaire)
  {
    var st = question.Id == CurrentQuestion?.Id ? "selected" : "";
    var t = question.Useranswerid > 0 ? "flip" : "";
    <div class="puzzle-unit @st" @onclick="(async () => await QuestionSelected.InvokeAsync(question.Id))">
      <div class="flip-box-front">
        @(question.Id == CurrentQuestion?.Id ? question.Score : question.Id)
      </div>
      <div class="flip-box-back">

      </div>
    </div>
  }
}

@code {
  [Parameter] public Question? CurrentQuestion { get; set; }
  [Parameter] public IEnumerable<Question>? Questionnaire { get; set; }
  [Parameter] public EventCallback<int?> QuestionSelected { get; set; }
}
